from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import action, api_view
from django.shortcuts import get_object_or_404
from .models import Card, Column
from .serializers import CardSerializer, ColumnSerializer
from .permissions import IsProjectMember
from rest_framework.permissions import IsAuthenticated
from projects.models import Project, ProjectMember
from django.db.models import Max


class CardViewSet(viewsets.ViewSet):
    permission_classes = [IsAuthenticated, IsProjectMember]

    def list(self, request, project_id=None):
        project = get_object_or_404(Project, id=project_id)
        cards = Card.objects.filter(project=project)
        serializer = CardSerializer(cards, many=True)
        return Response(serializer.data)

    def create(self, request, project_id=None):
        project = get_object_or_404(Project, id=project_id)
        serializer = CardSerializer(data=request.data)

        if serializer.is_valid():
            card = serializer.save(project=project)
            return Response(CardSerializer(card).data, status=status.HTTP_201_CREATED)

        return Response(serializer.errors, status=400)

    def retrieve(self, request, pk=None):
        card = get_object_or_404(Card, pk=pk)
        if not ProjectMember.objects.filter(user=request.user, project=card.project).exists():
            return Response({'detail': 'Access denied'}, status=403)
        serializer = CardSerializer(card)
        return Response(serializer.data)


class ColumnViewSet(viewsets.ViewSet):
    permission_classes = [IsAuthenticated, IsProjectMember]

    def create(self, request, card_id=None):
        card = get_object_or_404(Card, id=card_id)

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ order –¥–ª—è —ç—Ç–æ–π –¥–æ—Å–∫–∏
        max_order = card.columns.aggregate(Max('order'))['order__max'] or 0
        next_order = max_order + 1

        serializer = ColumnSerializer(data=request.data)
        if serializer.is_valid():
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º card –∏ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π order –≤—Ä—É—á–Ω—É—é
            serializer.save(card=card, order=next_order)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=400)

    def update(self, request, pk=None):
        column = get_object_or_404(Column, id=pk)
        if not ProjectMember.objects.filter(user=request.user, project=column.card.project).exists():
            return Response({'detail': 'Access denied'}, status=403)

        # üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        new_title = request.data.get('title')
        if column.is_system and new_title and new_title != column.title:
            return Response({'detail': '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–ª–æ–Ω–∫—É "–ì–æ—Ç–æ–≤–æ"'}, status=400)

        serializer = ColumnSerializer(column, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=400)

    def destroy(self, request, pk=None):
        column = get_object_or_404(Column, id=pk)
        if not ProjectMember.objects.filter(user=request.user, project=column.card.project).exists():
            return Response({'detail': 'Access denied'}, status=403)

        # üîí –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        if column.is_system:
            return Response({'detail': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–ª–æ–Ω–∫—É "–ì–æ—Ç–æ–≤–æ"'}, status=400)

        column.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


@api_view(['PUT'])
def reorder_columns(request):
    for item in request.data:
        column = get_object_or_404(Column, id=item['id'])
        if not ProjectMember.objects.filter(user=request.user, project=column.card.project).exists():
            return Response({'detail': 'Access denied'}, status=403)
        column.order = item['order']
        column.save()
    return Response({'status': 'reordered'})
